{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"species",
				"species_dict"
			],
			[
				"aid_lis",
				"aid_list"
			],
			[
				"refre",
				"refresh_exemplars"
			],
			[
				"exem",
				"exemplars"
			],
			[
				"exemplar",
				"exemplar_logic"
			],
			[
				"aid",
				"aid_list_species_only"
			],
			[
				"da",
				"daid_annot_list"
			],
			[
				"req",
				"reqd_daid_annot_list"
			],
			[
				"data",
				"data_dict"
			],
			[
				"img",
				"imgPath"
			],
			[
				"skip",
				"skip_fl"
			],
			[
				"out",
				"out_fl_nm"
			],
			[
				"g_truth",
				"g_truth_population_z"
			],
			[
				"aidFtr",
				"aidFtrMapFl"
			],
			[
				"confidence",
				"confidence_z"
			],
			[
				"confi",
				"confidence_all"
			],
			[
				"zeb",
				"zebra_spec"
			],
			[
				"mode",
				"MODE"
			],
			[
				"min",
				"min_diff"
			],
			[
				"bigger",
				"bigger_y"
			],
			[
				"smaller",
				"smaller_y"
			],
			[
				"line",
				"line_overlaps"
			],
			[
				"nat",
				"nat_sum_avg_n"
			],
			[
				"sum",
				"sum_arr_from_avg"
			],
			[
				"sto",
				"stock_prices"
			],
			[
				"magic",
				"_magic_index"
			],
			[
				"child",
				"child_sum"
			],
			[
				"l",
				"l_sum"
			],
			[
				"new",
				"new_sum"
			],
			[
				"max",
				"max_sum"
			],
			[
				"adj",
				"adj_idx"
			],
			[
				"no",
				"node_list"
			],
			[
				"node",
				"node_idx"
			],
			[
				"get",
				"get_index_node_list"
			],
			[
				"is",
				"is_BST_dups_allowed"
			],
			[
				"_is",
				"_is_BST_dups_allowed"
			],
			[
				"_i",
				"_is_BST_dups_allowed"
			],
			[
				"height",
				"height_r"
			],
			[
				"de",
				"dequeue"
			],
			[
				"start",
				"start_node"
			],
			[
				"print",
				"print_graph"
			],
			[
				"add",
				"add_adjacents"
			],
			[
				"heap",
				"heap_arr"
			],
			[
				"m",
				"myHeap"
			],
			[
				"tree",
				"tree_trimmer"
			],
			[
				"in_",
				"in_order_arr"
			],
			[
				"inOrder",
				"inOrderTraversal_list"
			],
			[
				"curr",
				"curr_lvl"
			],
			[
				"check",
				"check_time_elapsed"
			],
			[
				"annot",
				"annot_uuid_ftr_map_fl"
			],
			[
				"annot_uui",
				"annot_uuid_ftr_map_fl_nm"
			],
			[
				"out_fl",
				"out_fl_head"
			],
			[
				"uuid_annot_",
				"uuid_annot_uuid_map_fl"
			],
			[
				"uuid",
				"uuid_dict"
			],
			[
				"build",
				"build_feature_file_ggr"
			],
			[
				"gid_",
				"gid_uuid_exif_ftr_map"
			],
			[
				"in_file",
				"in_file_uuid_gid_map"
			],
			[
				"in_f",
				"in_file"
			],
			[
				"aid_uuid",
				"aid_uuid_feature_map"
			],
			[
				"pre",
				"pre_order_arr"
			],
			[
				"in",
				"in_order_arr"
			],
			[
				"resi",
				"resize_img"
			],
			[
				"image",
				"image_path"
			],
			[
				"con",
				"convert_fl_gid_idx"
			],
			[
				"ou",
				"outFl"
			],
			[
				"fl",
				"flnm_gid_map"
			],
			[
				"gid",
				"gid_flnm_map"
			],
			[
				"job",
				"jobid_str"
			],
			[
				"run_",
				"run_id_pipeline"
			],
			[
				"ru",
				"run_id_detection"
			],
			[
				"l_",
				"l_end"
			],
			[
				"str",
				"strng"
			],
			[
				"arr",
				"arr_2D"
			],
			[
				"find",
				"find_num_paths"
			],
			[
				"pwr",
				"pwr_set"
			],
			[
				"pw",
				"pwr_set"
			],
			[
				"end",
				"endGID"
			],
			[
				"star",
				"startGID"
			],
			[
				"map",
				"mapFlObj"
			],
			[
				"isB",
				"isBST_rec"
			],
			[
				"rever",
				"reverseLL_rec_util"
			],
			[
				"flLi",
				"flListJson"
			],
			[
				"size",
				"sizeJson"
			],
			[
				"popua",
				"population_z"
			],
			[
				"popul",
				"population_z"
			],
			[
				"pass",
				"passthru"
			],
			[
				"calc",
				"calc_gpa"
			],
			[
				"grade",
				"grade_list"
			],
			[
				"be",
				"beautyFtrs"
			],
			[
				"attr",
				"attribTypes"
			],
			[
				"train",
				"train_x"
			],
			[
				"test",
				"testDataFeatures"
			],
			[
				"plot",
				"plotResiduals"
			],
			[
				"rgr",
				"rgrAlgoTypes"
			],
			[
				"em",
				"embedCodes"
			],
			[
				"eva",
				"eval_clf_perfs_classic"
			],
			[
				"clf",
				"clfObj"
			],
			[
				"gen",
				"gen_graphics_clf_perf"
			],
			[
				"ba",
				"is_bag_of_wrds"
			],
			[
				"tra",
				"trainTestSplit"
			],
			[
				"res",
				"result_file"
			],
			[
				"json",
				"jsonFl"
			],
			[
				"exi",
				"exifJson"
			],
			[
				"exif",
				"exif_dict"
			],
			[
				"flickr",
				"flickrObj"
			],
			[
				"fli",
				"flickrObj"
			],
			[
				"counts_",
				"counts_hue"
			],
			[
				"rgb",
				"rgbImg"
			],
			[
				"X_",
				"X_test"
			],
			[
				"farm1",
				"farm1Urls"
			],
			[
				"url",
				"urlListMaster"
			],
			[
				"urt",
				"urlListMaster"
			],
			[
				"download",
				"download_dir"
			],
			[
				"com",
				"combineJson"
			],
			[
				"inp",
				"inpBeautyFl"
			],
			[
				"outFl",
				"outFlNm"
			],
			[
				"thres",
				"threshold"
			],
			[
				"sha",
				"shareAbvThreshold"
			],
			[
				"thresh",
				"thresholdMeth"
			],
			[
				"pred",
				"prediction_probabs"
			],
			[
				"keys",
				"keysOfInterest"
			],
			[
				"run",
				"runSyntheticExpts"
			],
			[
				"meth",
				"methTypes"
			],
			[
				"att",
				"attribTypes"
			],
			[
				"sdCard",
				"sdCardSorted"
			],
			[
				"prediction",
				"predictions_k"
			],
			[
				"sd",
				"sdCardSorted"
			],
			[
				"predic",
				"prediction_results"
			]
		]
	},
	"buffers":
	[
		{
			"file": "script/UploadAndDetectIBEIS.py",
			"settings":
			{
				"buffer_size": 14759,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Mark Recapture Helper Scripts\nimport json\nimport DeriveFinalResultSet as DRS\nimport DataStructsHelperAPI as DS\nimport importlib\nimport pandas as pd\nimport warnings\nimport sys, math\nimportlib.reload(DS)\nMODE = 'GGR'\n'''\n\nadd logic to handle zoo animals in a different function\nhandle_zoo_animals(bottom_left_lat, bottom_left_long, top_right_lat, top_right_long)\nshould return animals that are found within this rectangular area in the map\nIssue #15\n'''\n\ndef gid_filter_logic(inExifFl, inGidAidMapFl, inAidFtrFl):\n\twith open(inExifFl,\"r\") as inpFl:\n\t\tjsonObj = json.load(inpFl)\n\n\t# to preserve only images taken in wild - should be commented when not needed.\n\tgids_nairobi = [gid for gid in jsonObj.keys() if jsonObj[gid]['lat'] >= -1.50278 and jsonObj[gid]['lat'] <= 1.504953 and jsonObj[gid]['long'] >= 35.174045 and jsonObj[gid]['long'] <= 38.192836 ]\n\tgids_geo_tagged = [gid for gid in jsonObj.keys() if jsonObj[gid]['lat'] != 0 or jsonObj[gid]['long'] != 0]\n\tgids_zoo = list(set(gids_geo_tagged) - set(gids_nairobi))\n\n\tgid_nid = DRS.getCountingLogic(inGidAidMapFl,inAidFtrFl,\"NID\",False)\n\tnid_gid = DS.flipKeyValue(gid_nid)\n\n\tnids_zoo = []\n\tfor gid in gid_nid.keys():\n\t\tif gid in gids_zoo:\n\t\t\tnids_zoo.extend(gid_nid[gid]) # this will take care of list of lists\n\n\tnids_in_wild_gid_map = {nid: nid_gid[nid] for nid in nid_gid.keys() if nid not in nids_zoo}\n\n\t# this contains all the images that have no animals that were even once identified in the zoo\n\tgid_list = list({gid for sublist in list(nids_in_wild_gid_map.values()) for gid in sublist})\n\n\treturn gid_list\n\ndef genNidMarkRecapDict(inExifFl,inGidAidMapFl,inAidFtrFl,gidPropMapFl,daysDict,filterBySpecies=None,shareData='proportion',probabThreshold=1):\n\twith open(inExifFl,\"r\") as inpFl:\n\t\tjsonObj = json.load(inpFl)\n\n\t# Extract only the date information for all the given images\n\t# modify the date format as and when needed to match the requirements. \n\n\t## for calculating year-wise mark recapture estimates\n\t# imgDateDict = {gid : DS.getDateFromStr(jsonObj[gid]['date'],'%Y-%m-%d %H:%M:%S','%Y') for gid in jsonObj.keys()} \n\n\t## for calculating regular mark-recapture estimate\n\timgDateDict = {gid : DS.getDateFromStr(jsonObj[gid]['datetime'],'%Y-%m-%d %H:%M:%S','%Y-%m-%d') for gid in jsonObj.keys()} \n\n\n\t# gid_list = gid_filter_logic(inExifFl, inGidAidMapFl, inAidFtrFl) # -- not needed always\n\n\t# filter out only the GIDs that were taken on either of the days specified in the days dictionary\n\tfilteredGid = list(filter(lambda x : imgDateDict[x] in daysDict.keys(),imgDateDict.keys()))\n\t# filteredGid = [gid for gid in filteredGid if gid in gid_list] # should be commented once done -- not needed always\n\n\t# Logic to handle only the images that are shared\n\tif shareData in {'proportion' , 'classifier' }:\n\t\tfilteredGid = genSharedGids(filteredGid,gidPropMapFl,shareData,probabThreshold)\n\t\n\t# Replace the day with Mark or Recapture\n\tgidsDayNumFull = { gid : daysDict[imgDateDict[gid]] for gid in filteredGid } \n\n\t# Build map of images and the individuals in it. \n\tgidNid = DRS.getCountingLogic(inGidAidMapFl,inAidFtrFl,\"NID\",False, MODE)\n\tif filterBySpecies != None:\n\t\tgidSpecies = DRS.getCountingLogic(inGidAidMapFl,inAidFtrFl,\"SPECIES\",False, MODE)\n\t\tgidsDayNum = { gid : gidsDayNumFull[gid] for gid in gidsDayNumFull  if gid in gidSpecies.keys() and filterBySpecies in gidSpecies[gid]}\n\telse:\n\t\tgidsDayNum = gidsDayNumFull\n\n\tnidMarkRecap = {}\n\tfor gid in gidsDayNum.keys(): # only iterate over the GIDs of interest\n\t\tif gid in gidNid.keys(): # not all images with valid EXIF feature will have an annotation\n\t\t\tfor nid in gidNid[gid]:\n\t\t\t\tif int(nid) > 0 and int(nid) != 45: # ignore all the false positives --and ignore NID 45\n\t\t\t\t\tnidMarkRecap[nid] = nidMarkRecap.get(nid,[]) + [gidsDayNum[gid]]\n\n\tnidMarkRecapSet = { nid : list(set(nidMarkRecap[nid])) for nid in nidMarkRecap.keys()}\n\n\treturn nidMarkRecapSet\n\n# Return Petersen-Lincoln Index for mark-recapture\ndef applyMarkRecap(nidMarkRecapSet):\n\tuniqueIndsDay1 = {nid for nid in nidMarkRecapSet if 1 in nidMarkRecapSet[nid]}\n\tuniqueIndsDay2 = {nid for nid in nidMarkRecapSet if 2 in nidMarkRecapSet[nid]}\n\n\tmarks = len(uniqueIndsDay1)\n\trecaptures = len(uniqueIndsDay1 & uniqueIndsDay2)\n\tday2_sights = len(uniqueIndsDay2)\n\ttry:\n\t\tpopulation =  day2_sights * marks / recaptures\n\t\tconfidence = 1.96 * math.sqrt(marks**2 * day2_sights * (day2_sights-recaptures) / recaptures**2)\n\texcept:\n\t\twarnings.warn(\"There are no recaptures for this case.\")\n\t\tpopulation = 0\n\t\tconfidence=0\n\t\tprint(recaptures)\n\n\t\n\treturn marks,recaptures,population,confidence\n\ndef genSharedGids(gidList,gidPropMapFl,shareData='proportion',probabThreshold=1):\n\tdf = pd.DataFrame.from_csv(gidPropMapFl)\n\n\tif shareData == 'proportion':\n\t\tgidPropDict = df['Proportion'].to_dict()\n\t\thighSharedGids = { str(gid) for gid in gidPropDict.keys() if float(gidPropDict[gid]) >= 80.0 }\n\telse:\n\t\tgidShrDict = df['share'].to_dict()\n\t\thighSharedGids = { str(gid) for gid in gidShrDict.keys() if float(gidShrDict[gid]) >= probabThreshold }\n\n\treturn list(set(gidList) & highSharedGids)\n\ndef runMarkRecap(inExifFl,inGidAidMapFl,inAidFtrFl,gidPropMapFl,daysDict,filterBySpecies=None,shareData='proportion',probabThreshold=1):\n\tnidMarkRecapSet = genNidMarkRecapDict(inExifFl,inGidAidMapFl,inAidFtrFl,gidPropMapFl,daysDict,filterBySpecies,shareData,probabThreshold)\n\treturn applyMarkRecap(nidMarkRecapSet)\n",
			"file": "script/MarkRecapHelper.py",
			"file_size": 5375,
			"file_write_time": 131381452360000000,
			"settings":
			{
				"buffer_size": 5374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "script/DataStructsHelperAPI.py",
			"settings":
			{
				"buffer_size": 1930,
				"line_ending": "Unix"
			}
		},
		{
			"file": "script/htmltag.py",
			"settings":
			{
				"buffer_size": 22952,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/Graphs.py",
			"settings":
			{
				"buffer_size": 4070,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "[ [10, 20, 30, 40],\n                    [15, 25, 35, 45],\n                    [27, 29, 37, 48],\n                    [32, 33, 39, 50],\n                  ]",
			"settings":
			{
				"buffer_size": 153,
				"line_ending": "Unix",
				"name": "[ [10, 20, 30, 40],"
			}
		},
		{
			"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/practice_problems/DynamicProgImp.py",
			"settings":
			{
				"buffer_size": 5293,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/List.py",
			"settings":
			{
				"buffer_size": 3752,
				"line_ending": "Unix"
			}
		},
		{
			"file": "script/GetPropertiesAPI.py",
			"settings":
			{
				"buffer_size": 5436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "packa",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script"
	],
	"file_history":
	[
		"/Users/sreejithmenon/Desktop/ms_q3.py",
		"/Users/sreejithmenon/Desktop/ms_q2.py",
		"/Users/sreejithmenon/Desktop/q2.py",
		"/Users/sreejithmenon/Desktop/q1.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_UUID_AID_map.json",
		"/Users/sreejithmenon/UploadAndDetectIBEIS.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/NeighbourhoodInformant/Code/data_dump.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/UploadAndDetectIBEIS.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/DataStructsHelperAPI.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/SocialMediaImageExtracts.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/ExtractBtyFtrs.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/BuildConsolidatedFeaturesFile.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/GetPropertiesAPI.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/skip_files.dat",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_Bty_Giraffe.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_EXIF_full.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/UploadHelper.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/ClassifierCapsuleClass.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/ClassiferHelperAPI.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/PopulationEstimatorAPI.py",
		"/Users/sreejithmenon/Downloads/synthetic_experiments_schematic.xml",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/MarkRecapHelper.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/JobsMapResultsFilesToContainerObjs.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/GZC_exifs_beauty_full.json",
		"/private/tmp/test.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/KrippendorfAgreementScore.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/DeriveFinalResultSet.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/Graphs.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/BinarySearchTree.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/Heaps.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/Tree.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/practice_problems/PracticeProbs.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/SearchNSort.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/practice_problems/DynamicProgImp.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/PracticeProbs.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_annot_uuid_ftr_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_gid_uuid_exif_ftr_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_gid_uuid_annot_uuid_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_beauty_features.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/uuid_gid_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_uuid_list.dat",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/full_gid_aid_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/full_aid_features.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_ftr_extract_1_annot_uuid_ftr_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_Beauty_features.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/flickr_imgs_gid_flnm_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/GZC_beauty_features.json",
		"/private/tmp/test_uuid_annot_uuid_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/experiment2_aid_features.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/ggr_ftr_extract_3_annot_uuid_ftr_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/bing_img_data.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/GZC_data_tagged.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_Location_data.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts.json",
		"/private/tmp/test_exif.json",
		"/private/tmp/test_annot_uuid_ftr_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/GZC_exifs_beauty_full.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/new_flickr_extracts_fl_list.dat",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/windowsBatchFiles/ApproveWorkBatchExpt3_prod.txt",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_Bing.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/Plotly.keys",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/flickr_imgs_gid_flnm_map_new.json",
		"/Users/sreejithmenon/Downloads/old.json",
		"/Users/sreejithmenon/Downloads/new.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_full.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_full.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_EXIF_Full_new.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/BingSearchAPI_key.dat",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/BingImageSearchAPI.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_5.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_4.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_3.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_2.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/beautyFeatures_FlickrExtracts_new_1.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/BuildHITCommands.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/windowsBatchFiles/ApproveWorkBatchExpt3_prod.cmd",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/windowsBatchFiles/LoadHITBatchExpt3_prod.cmd",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/CreateTurkFilesBulk.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/GenerateMTurkFileAPI.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/files/header_prod.txt",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/MTurk_Job_files/mTurkFilesExpt3/Replace_Div_ele.sh",
		"/Users/sreejithmenon/Downloads/test.html",
		"/Library/aws-mturk-clt-1.3.3/bin/mturk.properties",
		"/private/tmp/PROD/Expt3_photo_album_1_prod.question",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/MTurk_Job_files/mTurkFilesExpt3/DEV/Expt3_photo_album_1.question",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/DynamicProgImp.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/MTurk_Job_files/mTurkFilesExpt3/replace_files.sh",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/HumanImagesException.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/HumanImagesException2.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Expt3_job_gids_map_fl.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/windowsBatchFiles/GetResultsBatchExpt3_prod.cmd",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/windowsBatchFiles/LoadHITBatchExpt3_dev.cmd",
		"/Users/sreejithmenon/Downloads/test.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/LinkedList.py",
		"/Users/sreejithmenon/Desktop/UploadHelper.py",
		"/Users/sreejithmenon/Downloads/test.sh",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Other/MTurk_Job_files/mTurkFilesExpt2/prod/photo_album_1.input",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/Flickr_Predicted_Scores_distributions.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_IBEIS_Ftrs_gid_aid_features.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/ResultsDashboard.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/ridge_beauty_kSharesRandom.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/BeautyFtrVector_GZC_Expt2.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/Flickr_FL_URL_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/Notebooks/Flickr_FL_URL_map.json",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/ImageShareabilityClassifiers.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/random_shares_errors_rgr.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/topk_shares_errors_clf.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/topk_shares_errors_rgr.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/random_shares_errors_clf.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/bottomk_shares_errors_clf.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/threshold_shares_errors_rgr.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/bottomk_shares_errors_rgr.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/test.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/test",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/topk_shares_errors_rgr.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/BaseCapsuleClass.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/topk_shares_clf_beauty.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/topk_shares_rgr_beauty.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/PopulationEstimatorFromClf.py",
		"/Users/sreejithmenon/Desktop/GPA_calculator.py",
		"/Users/sreejithmenon/Dropbox/Social_Media_Wildlife_Census/Flickr_Scrape/delete_files.sh",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/data/fileURLS.dat",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/kSharesMixMatch_Rgr_Beauty_thresholded.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/FinalResults/lasso_beauty_kShares.csv",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/RegressionCapsuleClass.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/ImageShareabilityRegressors.py",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/ClassifierResults/RegressionResults_BeautyGrouped.html",
		"/Users/sreejithmenon/Google Drive/CodeBase/AWESOME/script/extractBtyFtrs.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"}",
			"{",
			"    ",
			"run_id_pipeline",
			"null",
			"genNidMarkRecapDict",
			"print",
			"genGidAidDictFromMap",
			"print",
			"mode",
			"diff",
			"height",
			"bal",
			"660eb8ba-7711-1c01-e001-dfd81f596b0b",
			"\"660eb8ba-7711-1c01-e001-dfd81f596b0b\"",
			"\"1a39e23e-554c-d05d-1091-5c3bba2368b7\"",
			"a047f5a7-e831-4821-a340-11836781bf23",
			"[]",
			"null",
			"datetime",
			"258377856_a05f5f3de3_b.jpg",
			".jpg",
			"0daedc57-4839-5b84-8ed3-89d6b14be50f",
			"NaN",
			".jpeg",
			".json",
			"..",
			"6089112646",
			"6089112646_98d87c8d04_b.jpg",
			"6089112646_98d87c8d04_b",
			"_b",
			"30387263343",
			"30817796540",
			"2005-01",
			"-01",
			"$mturk_bin/",
			"\"width:600px;height:600px;overflow:hidden;\"",
			"\"1\"",
			"height=\"600\"",
			" ",
			"uuid",
			"level",
			"orientation",
			"reverse",
			"top",
			"5943100313_b29674bb5d_b.jpeg",
			"5900898833_3d575a95e4_b.jpg",
			"6220888100_2ac56d4d7b_b",
			"4509676636_6b3e022de6_b.jpg",
			"final_ftr_obj",
			"lambda",
			"delete",
			"delete('api/annot', data_dict)",
			"re",
			"feature_gen",
			"<td style=\"width:50%;\">",
			"<td>",
			"K",
			"Threshold",
			"bottom.html",
			"kShares",
			"res",
			"masterList",
			"print",
			"clfArgs",
			"clf",
			"    ",
			" ",
			"'",
			"\n\t",
			"h3",
			"rgrObj",
			"x",
			"agg",
			"resultsFeaturesComb_expt2",
			"col-sm-3",
			"json",
			"count",
			"L",
			"sort",
			"minSupDict",
			"&gt;",
			"&lt;",
			"{",
			"}",
			"{",
			"    ",
			"key",
			") ",
			"=",
			"csv",
			"getFltrCondn",
			"isSparse",
			"/Users/sreejithmenon/",
			"a",
			"pre",
			"layin",
			"genAidGidDictFromMap",
			"json",
			"width = \"350\"",
			"&gt;",
			"&lt;",
			"<td>",
			"td",
			"&lt;",
			"&gt;",
			"&lt;",
			"&gt;",
			"&lt;",
			"json",
			"valign=\"top\"",
			"<td><img",
			"      <td></td>",
			"&gt;",
			"&lt;",
			"<td></td>",
			"&gt;",
			"&lt;",
			"&gt;",
			"&lt;",
			"valign=\"top\"",
			"width=\"300\"",
			"jpeg\"",
			"href",
			"jpeg",
			"<td>https:",
			"<td></td>",
			"unidentified"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"]",
			"[",
			"",
			"null",
			"[]",
			"date",
			"",
			".json\",",
			"\"..",
			"_b.jpg",
			"",
			"\\\"width:600px;height:600px;overflow:hidden;\\\"",
			"\\\"1\\\"",
			"height=\"auto\"",
			",",
			"rotation",
			"<td style=\"width:60%;\">",
			"<td style=\"width:50%;\">",
			"k",
			"K",
			"Random.html",
			"thresholded",
			"resultDict",
			"reliabilityMatrx",
			"methArgs",
			"meth",
			"",
			",",
			"",
			"h2",
			"X",
			"L",
			"M",
			">",
			"<",
			"[",
			"]",
			"],",
			"[",
			"",
			"hasSparse",
			"<some path>",
			"width = \"100\"",
			"",
			">",
			"<",
			"<td style=\"word-wrap: break-word\">",
			"td style=\"word-wrap: break-word\"",
			"<",
			">",
			"<",
			">",
			"<",
			"valign=\"center\"",
			"<td rowspan=2><img",
			"",
			">",
			"<",
			"",
			">",
			"<",
			">",
			"<",
			"",
			"valign=\"center\"",
			"width=\"400\"",
			"jpeg\" width=\"300\"",
			"src",
			"jpeg\"></img>",
			"jpeg\"",
			"<td rowspan=\"2\"><img href=\"https:",
			"",
			"UNIDENTIFIED",
			"unidentified",
			",",
			"s.stdev",
			"s.mean",
			"",
			"getResults ",
			"getResults",
			"965",
			"5434",
			"5657",
			"7520",
			"7519",
			"5657",
			"1292",
			"GP",
			"/Users/sreejithmenon/Google Drive/PythonCode/AnimalPhotoBias",
			",",
			"",
			"300",
			"",
			"NULL",
			"<location_of_file>\\",
			"<location_of_file>",
			"Friday 25th",
			"Thursday 24th"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "script/UploadAndDetectIBEIS.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14759,
						"regions":
						{
						},
						"selection":
						[
							[
								6633,
								6633
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2474.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "script/MarkRecapHelper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5374,
						"regions":
						{
						},
						"selection":
						[
							[
								454,
								454
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "script/DataStructsHelperAPI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1930,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "script/htmltag.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 22952,
						"regions":
						{
						},
						"selection":
						[
							[
								1142,
								1142
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 249.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/Graphs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4070,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								754
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 308.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								0
							]
						],
						"settings":
						{
							"auto_name": "[ [10, 20, 30, 40],",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/practice_problems/DynamicProgImp.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5293,
						"regions":
						{
						},
						"selection":
						[
							[
								2871,
								2871
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 994.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/sreejithmenon/Google Drive/CodeBase/AlgDataStruct_practice/data_structures/List.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3752,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "script/GetPropertiesAPI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5436,
						"regions":
						{
						},
						"selection":
						[
							[
								623,
								623
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 602.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 223.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "AWESOME_scripts.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"flickr_uuid",
				"data/Flickr_UUID_AID_map.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 218.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
